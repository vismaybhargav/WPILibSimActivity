package frc.robot;

import static edu.wpi.first.units.Units.Amps;
import static edu.wpi.first.units.Units.Inches;
import static edu.wpi.first.units.Units.KilogramSquareMeters;
import static edu.wpi.first.units.Units.MetersPerSecond;
import static edu.wpi.first.units.Units.Rotations;
import static edu.wpi.first.units.Units.Volts;

import com.ctre.phoenix6.CANBus;
import com.ctre.phoenix6.configs.CANcoderConfiguration;
import com.ctre.phoenix6.configs.CurrentLimitsConfigs;
import com.ctre.phoenix6.configs.Pigeon2Configuration;
import com.ctre.phoenix6.configs.Slot0Configs;
import com.ctre.phoenix6.configs.TalonFXConfiguration;
import com.ctre.phoenix6.hardware.CANcoder;
import com.ctre.phoenix6.hardware.TalonFX;
import com.ctre.phoenix6.signals.StaticFeedforwardSignValue;
import com.ctre.phoenix6.swerve.SwerveDrivetrain;
import com.ctre.phoenix6.swerve.SwerveDrivetrainConstants;
import com.ctre.phoenix6.swerve.SwerveModuleConstants;
import com.ctre.phoenix6.swerve.SwerveModuleConstants.ClosedLoopOutputType;
import com.ctre.phoenix6.swerve.SwerveModuleConstants.DriveMotorArrangement;
import com.ctre.phoenix6.swerve.SwerveModuleConstants.SteerFeedbackType;
import com.ctre.phoenix6.swerve.SwerveModuleConstants.SteerMotorArrangement;
import com.ctre.phoenix6.swerve.SwerveModuleConstantsFactory;

import edu.wpi.first.math.Matrix;
import edu.wpi.first.math.numbers.N1;
import edu.wpi.first.math.numbers.N3;
import edu.wpi.first.units.measure.Angle;
import edu.wpi.first.units.measure.Current;
import edu.wpi.first.units.measure.Distance;
import edu.wpi.first.units.measure.LinearVelocity;
import edu.wpi.first.units.measure.MomentOfInertia;
import edu.wpi.first.units.measure.Voltage;
import frc.robot.Constants.ModuleConstants;

// Generated by the Tuner X Swerve Project Generator
// https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html
public class TunerConstants {
	// Both sets of gains need to be tuned to your individual robot.

	// The steer motor uses any SwerveModule.SteerRequestType control request with the
	// output type specified by SwerveModuleConstants.SteerMotorClosedLoopOutput
	private static final Slot0Configs STEER_GAINS = new Slot0Configs()
		.withKP(ModuleConstants.STEER_P).withKI(0).withKD(ModuleConstants.STEER_D)
		.withKS(ModuleConstants.STEER_S).withKV(ModuleConstants.STEER_V).withKA(0.0)
		.withStaticFeedforwardSign(StaticFeedforwardSignValue.UseClosedLoopSign);
	// When using closed-loop control, the drive motor uses the control
	// output type specified by SwerveModuleConstants.DriveMotorClosedLoopOutput
	private static final Slot0Configs DRIVE_GAINS = new Slot0Configs()
		.withKP(ModuleConstants.DRIVE_P)
		.withKI(ModuleConstants.DRIVE_I)
		.withKD(ModuleConstants.DRIVE_D)
		.withKS(0)
		.withKV(ModuleConstants.DRIVE_V);

	// The closed-loop output type to use for the steer motors;
	// This affects the PID/FF gains for the steer motors
	private static final ClosedLoopOutputType STEER_CLOSED_LOOP_OUT = ClosedLoopOutputType.Voltage;
	// The closed-loop output type to use for the drive motors;
	// This affects the PID/FF gains for the drive motors
	private static final ClosedLoopOutputType DRIVE_CLOSED_LOOP_OUT = ClosedLoopOutputType.Voltage;

	// The type of motor used for the drive motor
	private static final DriveMotorArrangement DRIVE_MOTOR_TYPE =
		DriveMotorArrangement.TalonFX_Integrated;
	// The type of motor used for the drive motor
	private static final SteerMotorArrangement STEER_MOTOR_TYPE =
		SteerMotorArrangement.TalonFX_Integrated;

	// The remote sensor feedback type to use for the steer motors;
	// When not Pro-licensed, Fused*/Sync* automatically fall back to Remote*
	private static final SteerFeedbackType STEER_FEEDBACK_TYPE = SteerFeedbackType.FusedCANcoder;

	// The stator current at which the wheels start to slip;
	// This needs to be tuned to your individual robot
	private static final Current SLIP_CURRENT = Amps.of(120.0);

	// Initial configs for the drive and steer motors and the azimuth encoder; these cannot be null.
	// Some configs will be overwritten; check the `with*InitialConfigs()` API documentation.
	private static final TalonFXConfiguration DRIVE_INIT_CFGS = new TalonFXConfiguration()
		.withCurrentLimits(
			new CurrentLimitsConfigs()
			.withStatorCurrentLimit(Amps.of(ModuleConstants.DRIVE_CURRENT_LIMIT))
		);
	private static final TalonFXConfiguration STEER_INIT_CFGS = new TalonFXConfiguration()
		.withCurrentLimits(
			new CurrentLimitsConfigs()
				// Swerve azimuth does not require much torque output, so we can set a low
				// stator current limit to help avoid brownouts without impacting performance.
				.withStatorCurrentLimit(Amps.of(ModuleConstants.STEER_CURRENT_LIMIT))
				.withStatorCurrentLimitEnable(true)
		);
	private static final CANcoderConfiguration ENCODER_INIT_CFGS = new CANcoderConfiguration();
	// Configs for the Pigeon 2; leave this null to skip applying Pigeon 2 configs
	private static final Pigeon2Configuration PIGEON_CFGS = null;

	// CAN bus that the devices are located on;
	// All swerve devices must share the same CAN bus
	public static final CANBus CAN_BUS = new CANBus("Drivetrain", "./logs/example.hoot");

	// Theoretical free speed (m/s) at 12 V applied output;
	// This needs to be tuned to your individual robot
	public static final LinearVelocity SPEED_AT_12_VOLTS = MetersPerSecond.of(5.41);

	// Every 1 rotation of the azimuth results in kCoupleRatio drive motor turns;
	// This may need to be tuned to your individual robot
	private static final double COUPLE_RATIO = 3.125;

	public static final double DRIVE_RATIO = 5.902777777777778;
	private static final double STEER_RATIO = 18.75;
	public static final Distance WHEEL_RADIUS = Inches.of(2);

	private static final boolean INVERT_LEFT_SIDE = false;
	private static final boolean INVERT_RIGHT_SIDE = true;

	private static final int PIGEON_ID = 13;

	// These are only used for simulation
	private static final MomentOfInertia STEER_INERTIA = KilogramSquareMeters.of(0.01);
	private static final MomentOfInertia DRIVE_INERTIA = KilogramSquareMeters.of(0.01);
	// Simulated voltage necessary to overcome friction
	private static final Voltage STEER_FRICTIOM_VOLTS = Volts.of(0.2);
	private static final Voltage DRIVE_FRICTION_VOLTS = Volts.of(0.2);

	public static final SwerveDrivetrainConstants DRIVETRAIN_CONSTANTS =
		new SwerveDrivetrainConstants().withCANBusName(CAN_BUS.getName()).withPigeon2Id(PIGEON_ID)
		.withPigeon2Configs(PIGEON_CFGS);

	private static final SwerveModuleConstantsFactory<TalonFXConfiguration, TalonFXConfiguration,
		CANcoderConfiguration> CONSTANT_CREATOR = new SwerveModuleConstantsFactory
		<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration>()
			.withDriveMotorGearRatio(DRIVE_RATIO)
			.withSteerMotorGearRatio(STEER_RATIO)
			.withCouplingGearRatio(COUPLE_RATIO)
			.withWheelRadius(WHEEL_RADIUS)
			.withSteerMotorGains(STEER_GAINS)
			.withDriveMotorGains(DRIVE_GAINS)
			.withSteerMotorClosedLoopOutput(STEER_CLOSED_LOOP_OUT)
			.withDriveMotorClosedLoopOutput(DRIVE_CLOSED_LOOP_OUT)
			.withSlipCurrent(SLIP_CURRENT)
			.withSpeedAt12Volts(SPEED_AT_12_VOLTS)
			.withDriveMotorType(DRIVE_MOTOR_TYPE)
			.withSteerMotorType(STEER_MOTOR_TYPE)
			.withFeedbackSource(STEER_FEEDBACK_TYPE)
			.withDriveMotorInitialConfigs(DRIVE_INIT_CFGS)
			.withSteerMotorInitialConfigs(STEER_INIT_CFGS)
			.withEncoderInitialConfigs(ENCODER_INIT_CFGS)
			.withSteerInertia(STEER_INERTIA)
			.withDriveInertia(DRIVE_INERTIA)
			.withSteerFrictionVoltage(STEER_FRICTIOM_VOLTS)
			.withDriveFrictionVoltage(DRIVE_FRICTION_VOLTS);


	// Front Left
	private static final int FL_DRIVE_MOTOR_ID = 3;
	private static final int FL_STEER_MOTOR_ID = 4;
	private static final int FL_ENCODER_ID = 10;
	private static final Angle FL_ENCODER_OFFSET = Rotations.of(0.357177734375);
	private static final boolean FL_STEER_MOTOR_INV = true;
	private static final boolean FL_ENCODER_INV = false;

	private static final Distance FL_X_POS = Inches.of(11.378);
	private static final Distance FL_Y_POS = Inches.of(11.378);

	// Front Right
	private static final int FR_DRIVE_MOTOR_ID = 5;
	private static final int FR_STEER_MOTOR_ID = 6;
	private static final int FR_RIGHT_ENCODER_ID = 11;
	private static final Angle FR_ENCODER_OFFSET = Rotations.of(0.279052734375);
	private static final boolean FR_STEER_MOTOR_INV = true;
	private static final boolean FR_ENCODER_INV = false;

	private static final Distance FR_X_POS = Inches.of(11.378);
	private static final Distance FR_Y_POS = Inches.of(-11.378);

	// Back Left
	private static final int BL_DRIVE_MOTOR_ID = 1;
	private static final int BL_STEER_MOTOR_ID = 2;
	private static final int BL_ENCODER_ID = 9;
	private static final Angle BL_ENCODER_OFFSET = Rotations.of(-0.076171875);
	private static final boolean BL_STEER_MOTOR_INV = true;
	private static final boolean BL_ENCODER_INV = false;

	private static final Distance BL_X_POS = Inches.of(-11.378);
	private static final Distance BL_Y_POS = Inches.of(11.378);

	// Back Right
	private static final int BR_DRIVE_MOTOR_ID = 7;
	private static final int BR_STEER_MOTOR_ID = 8;
	private static final int BR_ENCODER_ID = 12;
	private static final Angle BR_ENCODER_OFFSET = Rotations.of(0.052490234375);
	private static final boolean BR_RIGHT_STEER_MOTOR_INV = true;
	private static final boolean BR_ENCODER_INV = false;

	private static final Distance BR_X_POS = Inches.of(-11.378);
	private static final Distance BR_Y_POS = Inches.of(-11.378);


	public static final SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration,
		CANcoderConfiguration> FRONT_LEFT = CONSTANT_CREATOR.createModuleConstants(
			FL_STEER_MOTOR_ID, FL_DRIVE_MOTOR_ID, FL_ENCODER_ID,
			FL_ENCODER_OFFSET, FL_X_POS, FL_Y_POS, INVERT_LEFT_SIDE,
			FL_STEER_MOTOR_INV, FL_ENCODER_INV
		);
	public static final SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration,
		CANcoderConfiguration> FRONT_RIGHT = CONSTANT_CREATOR.createModuleConstants(
			FR_STEER_MOTOR_ID, FR_DRIVE_MOTOR_ID, FR_RIGHT_ENCODER_ID,
			FR_ENCODER_OFFSET, FR_X_POS, FR_Y_POS, INVERT_RIGHT_SIDE,
			FR_STEER_MOTOR_INV, FR_ENCODER_INV
		);
	public static final SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration,
		CANcoderConfiguration> BACK_LEFT = CONSTANT_CREATOR.createModuleConstants(
			BL_STEER_MOTOR_ID, BL_DRIVE_MOTOR_ID, BL_ENCODER_ID,
			BL_ENCODER_OFFSET, BL_X_POS, BL_Y_POS, INVERT_LEFT_SIDE,
			BL_STEER_MOTOR_INV, BL_ENCODER_INV
		);
	public static final SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration,
		CANcoderConfiguration> BACK_RIGHT = CONSTANT_CREATOR.createModuleConstants(
			BR_STEER_MOTOR_ID, BR_DRIVE_MOTOR_ID, BR_ENCODER_ID,
			BR_ENCODER_OFFSET, BR_X_POS, BR_Y_POS, INVERT_RIGHT_SIDE,
			BR_RIGHT_STEER_MOTOR_INV, BR_ENCODER_INV
		);

	/**
	 * Creates a CommandSwerveDrivetrain instance.
	 * This should only be called once in your robot program,.
	 * @return A CommandSwerveDrivetrain instance
	 */
	public static CommandSwerveDrivetrain createDrivetrain() {
		return new CommandSwerveDrivetrain(
			DRIVETRAIN_CONSTANTS, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT
		);
	}


	/**
	 * Swerve Drive class utilizing CTR Electronics' Phoenix 6 API with the selected device types.
	 */
	public static class TunerSwerveDrivetrain extends SwerveDrivetrain<TalonFX, TalonFX, CANcoder> {
		/**
		 * Constructs a CTRE SwerveDrivetrain using the specified constants.
		 * <p>
		 * This constructs the underlying hardware devices, so users should not construct
		 * the devices themselves. If they need the devices, they can access them through
		 * getters in the classes.
		 *
		 * @param drivetrainConstants   Drivetrain-wide constants for the swerve drive
		 * @param modules               Constants for each specific module
		 */
		public TunerSwerveDrivetrain(
			SwerveDrivetrainConstants drivetrainConstants,
			SwerveModuleConstants<?, ?, ?>... modules
		) {
			super(
				TalonFX::new, TalonFX::new, CANcoder::new,
				drivetrainConstants, modules
			);
		}

		/**
		 * Constructs a CTRE SwerveDrivetrain using the specified constants.
		 * <p>
		 * This constructs the underlying hardware devices, so users should not construct
		 * the devices themselves. If they need the devices, they can access them through
		 * getters in the classes.
		 *
		 * @param drivetrainConstants     Drivetrain-wide constants for the swerve drive
		 * @param odometryUpdateFrequency The frequency to run the odometry loop. If
		 *                                unspecified or set to 0 Hz, this is 250 Hz on
		 *                                CAN FD, and 100 Hz on CAN 2.0.
		 * @param modules                 Constants for each specific module
		 */
		public TunerSwerveDrivetrain(
			SwerveDrivetrainConstants drivetrainConstants,
			double odometryUpdateFrequency,
			SwerveModuleConstants<?, ?, ?>... modules
		) {
			super(
				TalonFX::new, TalonFX::new, CANcoder::new,
				drivetrainConstants, odometryUpdateFrequency, modules
			);
		}

		/**
		 * Constructs a CTRE SwerveDrivetrain using the specified constants.
		 * <p>
		 * This constructs the underlying hardware devices, so users should not construct
		 * the devices themselves. If they need the devices, they can access them through
		 * getters in the classes.
		 *
		 * @param drivetrainConstants       Drivetrain-wide constants for the swerve drive
		 * @param odometryUpdateFrequency   The frequency to run the odometry loop. If
		 *                                  unspecified or set to 0 Hz, this is 250 Hz on
		 *                                  CAN FD, and 100 Hz on CAN 2.0.
		 * @param odometryStandardDeviation The standard deviation for odometry calculation
		 *                                  in the form [x, y, theta]ᵀ, with units in meters
		 *                                  and radians
		 * @param visionStandardDeviation   The standard deviation for vision calculation
		 *                                  in the form [x, y, theta]ᵀ, with units in meters
		 *                                  and radians
		 * @param modules                   Constants for each specific module
		 */
		public TunerSwerveDrivetrain(
			SwerveDrivetrainConstants drivetrainConstants,
			double odometryUpdateFrequency,
			Matrix<N3, N1> odometryStandardDeviation,
			Matrix<N3, N1> visionStandardDeviation,
			SwerveModuleConstants<?, ?, ?>... modules
		) {
			super(
				TalonFX::new, TalonFX::new, CANcoder::new,
				drivetrainConstants, odometryUpdateFrequency,
				odometryStandardDeviation, visionStandardDeviation, modules
			);
		}
	}
}
